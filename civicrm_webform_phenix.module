<?php 

/**
 * Permet de griser les champs effectif et le bouton valider si le formulaire a été déjà soumis par un adhérent
 */
function civicrm_webform_phenix_form_alter (&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $custom_service = \Drupal::service('civicrm_webform_phenix.webform');
  if ($form_id == 'webform_submission_demande_effectifs_phenix_v2_add_form') {
    //vérification si le token est valide sinon on redirige vers  la page d'accueil hint
    $request = \Drupal::request();
    $contactid = $request->query->get('cid');
    $token = $request->get('token');

    $checksumViaDatabase = $custom_service->checkIfHashContactIsGood($contactid);

    if ($contactid != $checksumViaDatabase) {
      return $custom_service->redirectHomePage();
    }                                               //end vérification hint

    $current_contact = \Drupal::request()->get('cid');

    $current_year = date('Y') - 1;
    $saisie_par_adherent = \Civi\Api4\Contact::get(FALSE)
        ->addSelect('custom_effectif_dsn.saisie_adherent')
        ->addSelect('custom_effectif_dsn.effectif')
        ->addJoin('Custom_effectif_dsn AS custom_effectif_dsn', 'LEFT')
        ->addWhere('id', '=', $current_contact)
        // ->addWhere('custom_effectif_dsn.eff_annee', '=', $current_year . '-01-01')//Condition par année à voir 
        ->execute()->column('custom_effectif_dsn.saisie_adherent')[0];

//si des données ont été déjà soumis pour cette année
if ($current_contact == 375528787) { //cid 37552 de makoa
  $effectif = \Civi\Api4\Contact::get(FALSE)
  ->addSelect('custom_effectif_dsn.saisie_adherent')
  ->addSelect('custom_effectif_dsn.effectif')
  ->addJoin('Custom_effectif_dsn AS custom_effectif_dsn', 'LEFT')
  ->addWhere('id', '=', $current_contact)
  // ->addWhere('custom_effectif_dsn.eff_annee', '=', $current_year . '-01-01')
  ->execute()->first()['custom_effectif_dsn.effectif'];
   //set field effectif to readonly
   if ($effectif > 0) {

     for ($i= 1; $i<15; $i++) {
       $form['elements']['civicrm_' . $i . '_contact_1_cg13_fieldset']['civicrm_' . $i . '_contact_1_cg13_custom_34']['#attributes']['readonly'] = true;
      }
      
      $form['actions']['submit']['#disabled'] = TRUE; //set button disabled
    }
}
if (($saisie_par_adherent == 1) && ($saisie_par_adherent != null) && ($saisie_par_adherent !== false)) {
      
        //set field effectif to readonly
        for ($i= 1; $i<15; $i++) {
            $form['elements']['civicrm_' . $i . '_contact_1_cg13_fieldset']['civicrm_' . $i . '_contact_1_cg13_custom_34']['#attributes']['readonly'] = true;
        }
            
        $form['actions']['submit']['#disabled'] = TRUE; //set button disabled
    }
  }


  //Formulaire pour adhérent 
  $req = \Drupal::request();
  if ($form_id == 'webform_submission_formulaire_pour_adherent_add_form' && $req->get('cs')) {
    $cid1 = $req->query->get('cid1');

    $all_datas = $custom_service->getAllDataByCid($form);
    
      // $user = \Drupal::currentUser();//Ceci ne marche plus une fois qu'on a utilisé le checksum
      // if ($user->isAnonymous()) {
      //   $form['#access'] = true;
      // }
  }else {
    //return $custom_service->redirectHomePage();  
  }
}

use Drupal\webform\Entity\Webform;

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function civicrm_webform_phenix_form_webform_submission_default_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Load the webform entity.
  $webform_id = $form_state->get('webform_submission_formulaire_pour_adherent_add_form');
  $webform = Webform::load($webform_id);

  // Allow anonymous submissions.
  $webform->set('settings.anonymous_submission', TRUE);
  $webform->save();
}

/**
 * Implements hook_webform_submission_presave().
 */
function civicrm_webform_phenix_webform_submission_presave(Drupal\webform\WebformSubmissionInterface $webform_submission) {
  // Perform actions or manipulate data before the webform submission is saved.
  // For example, you can access and modify the submission values using:
  // $webform_submission->setDataValue('field_name', 'new value');
  
 $webform = $webform_submission->getWebform();
 if ($webform_submission->getData()['civicrm_1_activity_1_activity_activity_type_id'] == 60) {
  
  $webform_submission->delete();
}
  $custom_service = \Drupal::service('civicrm_webform_phenix.webform');

  if ($webform->id() == 'formulaire_pour_adherent') {
    $datas = $webform_submission->getData();
    $descriptif = $datas['civicrm_1_contact_1_custom_50_7584'];
    $activitePrincipal = $datas['civicrm_1_activity_1_cg30_custom_7584'];
    $marques = $datas['civicrm_1_contact_1_marque'];
    $materielOccasion = $datas['civicrm_1_contact_1_famille_occasion'];
    $data_phone = $datas['civicrm_1_contact_1_phone_phone'];
    $data_website = $datas['civicrm_1_contact_1_website_url'];
    $data_email = $datas['civicrm_1_contact_1_email_email'];
    $new_marque = $datas['civicrm_2_activity_1_new_marque'];
    $url_video_presentation = $datas['civicrm_1_contact_1_contact_video_presentation'];
    $materiel_location = $datas['civicrm_1_contact_1_nom_location'];
    $default_value_all = json_decode($datas['valeur_par_defaut_des_champ']);
    $data_phone = preg_replace('/\s+/', '', $data_phone);
    $data_phone = implode(" ", str_split($data_phone, 2));
    $datas['civicrm_1_contact_1_phone_phone'] = $data_phone;
    $isThereAnyDataSubmited = false;
    foreach($datas as $key => $data) {
      switch($key) {
        case 'civicrm_1_contact_1_marque':
          if (!empty(array_diff($default_value_all->marque, $marques)) || !empty(array_diff($marques, $default_value_all->marque))) {
            $isThereAnyDataSubmited = true;
          }
          break;
        case 'civicrm_1_contact_1_nom_location':
          if ($materiel_location && ($default_value_all->type_materiel != $materiel_location )) {
            $isThereAnyDataSubmited = true;
          }
          break;
        case 'civicrm_2_activity_1_new_marque':
          if($new_marque) {
            $isThereAnyDataSubmited = true;
          }
          break;
        case 'civicrm_1_contact_1_phone_phone':
          if($data != $default_value_all->phone) {
            $isThereAnyDataSubmited = true;
          }
          break;
        case 'civicrm_1_contact_1_email_email':
          if($data != $default_value_all->email) {
            $isThereAnyDataSubmited = true;
          }
          break;
        case 'civicrm_1_contact_1_website_url':
          if($data != $default_value_all->website) {
            $isThereAnyDataSubmited = true;
          }
          break;
        case 'civicrm_1_contact_1_contact_video_presentation':
          if($data != $default_value_all->presentation) {
            $isThereAnyDataSubmited = true;
          }
          break;
        case 'civicrm_1_contact_1_famille_occasion':
          if($data != $default_value_all->materiel_occasion) {
            $isThereAnyDataSubmited = true;
          }
          break;
        case 'civicrm_1_contact_1_nom_location':
          if($data != $default_value_all->type_materiel) {
            $isThereAnyDataSubmited = true;
          }
          break;
        case 'civicrm_1_activity_1_activity_details':
          if($data['value']) {
            $isThereAnyDataSubmited = true;
          }
          break;
        case 'civicrm_2_activity_1_activity_details':
          if ($data['value'] || (!$custom_service->areMultidimensionalArraysEqual($marques, $default_value_all->marque))){
            $isThereAnyDataSubmited = true;
          }
          break;
      }
    }
    
    $req = \Drupal::request();
    $cid = $req->query->get('cid');
    if (!is_numeric($cid)) {
      $cid = explode('?', $cid);
      $cid = $cid[0];
    }
    
    /**$optionValues = \Civi\Api4\OptionValue::get(FALSE)
     ->addSelect('label')
     ->addWhere('value', '=', 3)
     ->addWhere('option_group_id', '=', 2)
     ->execute(); */

     $status = 2;
     
     $detail_activite_address = $datas['civicrm_1_activity_1_activity_details']['value'];
     $activite_subject = "Annuaire - Mise à jour par l'adhérent " . $custom_service->getOrganizationName($cid);
     
     //ajout activité 
     
     if ($detail_activite_address) {
       $all_activity['<b>Adresse : <b>'] =  $detail_activite_address;
       $status = 1;
      }
      
      $add_marque = $datas['civicrm_1_contact_1_marque'];
      
      $all_marques = $custom_service->getAllMarqueLabel($marques, $default_value_all->marque);
      
    
    if ($add_marque && ($default_value_all->marque != $add_marque)) {
      $all_activity['Marque : '] =  $all_marques;
    }

    if ((!$custom_service->areMultidimensionalArraysEqual($marques, $default_value_all->marque))) {
      $all_activity['Marque : '] =  $all_marques;
    }
    
    if ($materiel_location && ($default_value_all->type_materiel != $materiel_location )) {
      $all_materiel_locations = $custom_service->getLabelMaterielLocations ($materiel_location);
      $all_activity['Type de matériel : '] = $all_materiel_locations;
    }
    
    if ($new_marque) {
      $all_activity['<b>Ajout nouvelle marque : </b>'] =  $new_marque;
      $status = 1;
    }
    
    if ($activitePrincipal) {
      $label_main_activity = $custom_service->getLabelMainActivityById($activitePrincipal);
      $all_activity['Activité principale : '] =  $label_main_activity->label;
    }

    if ($materielOccasion && ($default_value_all->materiel_occasion != $materielOccasion)) {
      $all_activity['Matériel d\'occasion '] =  $custom_service->getLabelMaterielOccByIds($materielOccasion);
    }

    if ($data_phone && ($default_value_all->phone != $data_phone)) {
      $all_activity['Numéro téléphone : '] =  $data_phone;
    }
    if ($data_email && ($default_value_all->email != $data_email)) {
      $all_activity['Email : '] =  $data_email;
    }
    if ($data_website && ($default_value_all->website != $data_website)) {
      $all_activity['Site web : '] =  $data_website;
    }
    if ($url_video_presentation && ($default_value_all->presentation != $url_video_presentation)) {
      $all_activity['Url présentation (video)  : '] =  $url_video_presentation;
    }
    if ($descriptif['value'] && ($default_value_all->descriptif != $descriptif['value'])) {
      $all_activity['Descriptif entreprise : '] =  $descriptif['value'];
    }



    if (!$isThereAnyDataSubmited) {
      $all_activity = ['Modification' => 'Validé par l\'adherent sans modification'];
    }

    $custom_service->createActivity($cid, $activite_subject, $all_activity, $status);
    
    //update table descriptif entreprise
    $db = \Drupal::database();
    if ($datas) {  //todo codition 
      $descriptif = $descriptif['value'];
       $descriptif = Drupal\Core\Render\Markup::create($descriptif);
      
      
      $results = \Civi\Api4\Contact::update(FALSE)
        ->addValue('org_dlr.descriptif_entreprise', $descriptif)
        ->addValue('org_dlr.activiteprincipale', $activitePrincipal)  //Ne Modifie pas directement l'activité pple
        ->addWhere('id', '=', $cid)
        ->execute(); 

        $data_marques = $datas['civicrm_1_contact_1_marque'];
        $data_latitude = $datas['civicrm_1_contact_1_contact_latitude'];
        $data_longitude = $datas['civicrm_1_contact_1_contact_longitude'];
       
        //Update matériel occasion
        $custom_service->updateMaterielOccasion ($cid, $materielOccasion);

  
        //update materiel location
         if (!empty($materiel_location)) {

          $materiel_location = array_values($materiel_location);

          $results = \Civi\Api4\Contact::update(FALSE)
            ->addValue('Materiel.nom_location', $materiel_location)
            ->addWhere('id', '=', $cid)
            ->execute();
            //update materiel location_new

             $custom_service->updateLocationNew ($cid, $materiel_location);
        }else {// si aucun materiel location n'est selectionné
             $custom_service->updateLocationNewSetNull ($cid, $materiel_location);
        } 
        
        // dump($datas);die;

        // $custom_service->updateMail($data_email, $cid);
        // $custom_service->updatePhone($data_phone, $cid);
        // $custom_service->updateWebsite($data_website, $cid);

        //  TODO commented cause we don't want to edit marque directly
        if ($data_marques) {
          //supprimer les anciennes marques
          $delete_marque = \Civi\Api4\CustomValue::delete('Marques', FALSE)
          ->addWhere('entity_id', '=', $cid)
          ->execute();

          
          //ajout nouveau marque lié avec l'entreprise
          foreach ($data_marques as $data_marque) {
            $add_other_marque = \Civi\Api4\CustomValue::create('Marques', FALSE)
              ->addValue('nom_Marque', $data_marque)
              ->addValue('entity_id', $cid)
              ->execute();
          }
        }  
          
                  if ($url_video_presentation) {//TODO do not edit directly video presentation
          //ajout video dans media -> video en ligne  https://www.youtube.com/watch?v=73YG0olNXWo
          $query = "select field_media_oembed_video_value from media__field_media_oembed_video  where field_media_oembed_video_value = '" . $url_video_presentation . " '" ;
          $existing_video = $db->query($query)->fetch();
          if (!$existing_video) {
            $added_video = $custom_service->createMediaTypeVideo($url_video_presentation);
            $mid = $added_video->get('mid')->getValue()[0]['value'];
            if ($mid) {
              $custom_service->assignVideoToEntreprise($cid, $mid, $db);
            }
          }else {
            //assigner la video à l'entreprise
            $added_video = $custom_service->createMediaTypeVideo($url_video_presentation);
            $mid = $added_video->get('mid')->getValue()[0]['value'];
            $custom_service->assignVideoToEntreprise($cid, $mid, $db);
            $custom_service->updatedb($cid, $mid);

          }
        }else {//delete url video linked with cid
          $custom_service->deleteVideoLinkedWithCid($cid);
        }  
    } 

    // $url = "/form/formulaire-pour-adherent?cid=21293%3F3FaddressId%3D10449&token=a84776365a064acdf5e14fda7d4fc3c301e2b872b883462e733907d3da4779a9";
    // $response = new \Symfony\Component\HttpFoundation\RedirectResponse($url);
    // return $response->send();
    $checksum = $req->get('cs');
    $isValidChecksums = $custom_service->CustomizeValidateChecksum($cid, $checksum);
    if ($isValidChecksums) {
      // dump($cid, $checksum, ' normal');die;
      $url = '/civicrm/verifie-agence-liste#?id=' . $cid . '&token=' . $checksum;

      // Redirigez l'utilisateur vers la page de confirmation avec le token dans l'URL.
      $response = new \Symfony\Component\HttpFoundation\RedirectResponse($url);
      $response->send();
      // $custom_service->redirectAfterSubmit($cid, $checksum);
    }else {
      $custom_service->redirectHomePage();
    }
  }
  

 
}


/**
 * Implements hook_preprocess_page().
 */
function civicrm_webform_phenix_preprocess_page(&$variables)
{
  $request = \Drupal::request();
  $variables['#attached']['library'][] = 'civicrm_webform_phenix/civicrm_webform_phenix';
  
  $domain = \Drupal::request()->getHost();
  $currentUrl = \Drupal::request()->getRequestUri();
  if ((strpos($currentUrl, '/annuaire') !== false) && ($domain == 'extranet.dlr.fr')) {
    // Redirect to a specific URL.
   // $response = new \Symfony\Component\HttpFoundation\RedirectResponse('https://annuairedlr.fr/annuaire/');
   // $response->send();
  }
}

use Drupal\Core\Access\AccessResult;

/**
 * Implements hook_entity_update().
 */
function civicrm_webform_phenix_entity_update(Drupal\Core\Entity\EntityInterface $entity) {
  // Check if the updated entity is a webform.
  if ($entity instanceof Drupal\civicrm_entity\Entity\CivicrmEntity) {
     return AccessResult::allowed();
    /* 
    $entityType = $entity->getEntityTypeId();
    $entityId = $entity->id();
    
    
    $contactId = 20646;

  // Check permissions using the CiviCRM API.
  $civicrm = \Drupal::service('civicrm')->initialize();
  $permissions = $civicrm->call('EntityPermission', 'getpermissions', [
    'contact_id' => $contactId,
  ]);

  dump($permissions);die;

    // Get the webform's access control handler.
    $accessControlHandler = \Drupal::entityTypeManager()->getAccessControlHandler('civicrm_entity');
    
    // Get the current webform permissions.
    $permissions = $accessControlHandler->buildPermissions($entity);

    // Add or remove permissions as needed.
    // For example, to allow anonymous users to view and submit the webform:
    $permissions['view any webform'] = TRUE;
    $permissions['submit webform'] = TRUE;

    // Save the updated permissions.
    $accessControlHandler->savePermissions($entity, $permissions); */
  }
}


/**
 * 
 * Gestion de permission par rapport à l'utilisateur anonyme
 * 
 * Implements hook_entity_access().
 */
function civicrm_webform_phenix_entity_access($entity, $operation, $account) {
  // return Drupal\Core\Access\AccessResult::neutral();
  $custom_service = \Drupal::service('civicrm_webform_phenix.webform');
   
   $white_list_entity = $custom_service->whiteList();
  if ($account->isAnonymous()) {
    if (in_array($entity->id(), $white_list_entity))  {
      if ($operation == 'submission_page') {//n'authoriser aux utilisateurs anonyme que les 
        return Drupal\Core\Access\AccessResult::allowed();
      }
      if ($operation != 'view') {
        $whiteListFormat = ['restricted_html', 'basic_html', 'developper', 'plain_text'];
        if ($entity instanceof Drupal\filter\Entity\FilterFormat && in_array($entity->id(), $whiteListFormat)) {
          return Drupal\Core\Access\AccessResult::allowed();
        }
        // return Drupal\Core\Access\AccessResult::forbidden();
      }
    }else {
        // return Drupal\Core\Access\AccessResult::forbidden();
    }
  } 

}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for webform confirmation pages.
 */
function civicrm_webform_phenix_theme_suggestions_webform_confirmation_alter(array &$suggestions, array $variables) {
  /** @var \Drupal\webform\WebformSubmissionInterface $webform_submission */
  $webform_submission = $variables['webform'];
  // /** @var \Drupal\webform\WebformInterface $webform */
  $webform = $webform_submission->id();
  // dump($variables);
  $suggestions[] = 'webform_confirmation__' . $webform;
}
