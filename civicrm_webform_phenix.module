<?php 

/**
 * Permet de griser les champs effectif et le bouton valider si le formulaire a été déjà soumis par un adhérent
 */
function civicrm_webform_phenix_form_alter (&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $custom_service = \Drupal::service('civicrm_webform_phenix.webform');
  if ($form_id == 'webform_submission_demande_effectifs_phenix_v2_add_form') {
    //vérification si le token est valide sinon on redirige vers  la page d'accueil hint
    $request = \Drupal::request();
    $contactid = $request->query->get('cid');
    $token = $request->get('token');
    if ($contactid != $custom_service->decryptString($token)) {
      return $custom_service->redirectHomePage();
    }                                               //end vérification hint

    $current_contact = \Drupal::request()->get('cid');

    $current_year = date('Y') - 1;
    $saisie_par_adherent = \Civi\Api4\Contact::get()
        ->addSelect('custom_effectif_dsn.saisie_adherent')
        ->addSelect('custom_effectif_dsn.effectif')
        ->addJoin('Custom_effectif_dsn AS custom_effectif_dsn', 'LEFT')
        ->addWhere('id', '=', $current_contact)
        // ->addWhere('custom_effectif_dsn.eff_annee', '=', $current_year . '-01-01')//Condition par année à voir 
        ->execute()->column('custom_effectif_dsn.saisie_adherent')[0];

//si des données ont été déjà soumis pour cette année
if ($current_contact == 375528787) { //cid 37552 de makoa
  $effectif = \Civi\Api4\Contact::get()
  ->addSelect('custom_effectif_dsn.saisie_adherent')
  ->addSelect('custom_effectif_dsn.effectif')
  ->addJoin('Custom_effectif_dsn AS custom_effectif_dsn', 'LEFT')
  ->addWhere('id', '=', $current_contact)
  // ->addWhere('custom_effectif_dsn.eff_annee', '=', $current_year . '-01-01')
  ->execute()->first()['custom_effectif_dsn.effectif'];
   //set field effectif to readonly
   if ($effectif > 0) {

     for ($i= 1; $i<15; $i++) {
       $form['elements']['civicrm_' . $i . '_contact_1_cg13_fieldset']['civicrm_' . $i . '_contact_1_cg13_custom_34']['#attributes']['readonly'] = true;
      }
      
      $form['actions']['submit']['#disabled'] = TRUE; //set button disabled
    }
}
if (($saisie_par_adherent == 1) && ($saisie_par_adherent != null) && ($saisie_par_adherent !== false)) {
      
        //set field effectif to readonly
        for ($i= 1; $i<15; $i++) {
            $form['elements']['civicrm_' . $i . '_contact_1_cg13_fieldset']['civicrm_' . $i . '_contact_1_cg13_custom_34']['#attributes']['readonly'] = true;
        }
            
        $form['actions']['submit']['#disabled'] = TRUE; //set button disabled
    }
  }


  //Formulaire pour adhérent 
  if ($form_id == 'webform_submission_formulaire_pour_adherent_add_form') {
    $req = \Drupal::request();
    $cid1 = $req->query->get('cid1');
    $all_datas = $custom_service->getAllDataByCid($form);
    
      $user = \Drupal::currentUser();
      if ($user->isAnonymous()) {
        $form['#access'] = true;
      }
  }
}

use Drupal\webform\Entity\Webform;

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function civicrm_webform_phenix_form_webform_submission_default_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Load the webform entity.
  $webform_id = $form_state->get('webform_submission_formulaire_pour_adherent_add_form');
  $webform = Webform::load($webform_id);

  // Allow anonymous submissions.
  $webform->set('settings.anonymous_submission', TRUE);
  $webform->save();
}

/**
 * Implements hook_webform_submission_presave().
 */
function civicrm_webform_phenix_webform_submission_presave(Drupal\webform\WebformSubmissionInterface $webform_submission) {
  // Perform actions or manipulate data before the webform submission is saved.
  // For example, you can access and modify the submission values using:
  // $webform_submission->setDataValue('field_name', 'new value');
  
  $webform = $webform_submission->getWebform();
  $custom_service = \Drupal::service('civicrm_webform_phenix.webform');
  if ($webform->id() == 'formulaire_pour_adherent') {
    $datas = $webform_submission->getData();
    $descriptif = $datas['civicrm_1_contact_1_custom_50_7584'];
    $activitePrincipal = $datas['civicrm_1_activity_1_cg30_custom_7584'];
    $marques = $datas['civicrm_1_contact_1_marque'];
    $data_phone = $datas['civicrm_1_contact_1_phone_phone'];
    $data_website = $datas['civicrm_1_contact_1_website_url'];
    $data_email = $datas['civicrm_1_contact_1_email_email'];
    $url_video_presentation = $datas['civicrm_1_contact_1_contact_video_presentation'];
    $materiel_location = $datas['civicrm_1_contact_1_nom_location'];
    $req = \Drupal::request();
    $cid = $req->query->get('cid');
    if (!is_numeric($cid)) {
      $cid = explode('?', $cid);
      $cid = $cid[0];
    }
    
    //update table descriptif entreprise
    $db = \Drupal::database();
    if ($datas) {  //todo codition 
      $descriptif = $descriptif['value'];
      $descriptif = Drupal\Core\Render\Markup::create($descriptif);
      
      
      $results = \Civi\Api4\Contact::update(FALSE)
        ->addValue('org_dlr.descriptif_entreprise', $descriptif)
        ->addValue('org_dlr.activiteprincipale', $activitePrincipal)
        ->addWhere('id', '=', $cid)
        ->execute();

        $data_marques = $datas['civicrm_1_contact_1_marque'];
        $data_latitude = $datas['civicrm_1_contact_1_contact_latitude'];
        $data_longitude = $datas['civicrm_1_contact_1_contact_longitude'];

        //update lat & lon
        if ($data_latitude) {
          $update_lat = \Civi\Api4\Address::update(FALSE)
            ->addValue('geo_code_1', $data_latitude)
            ->addWhere('contact_id', '=', $cid)
            ->addWhere('is_primary', '=', TRUE)
            ->execute();
          }
          
          //update lat & lon
          if ($data_longitude) {
            $update_lon = \Civi\Api4\Address::update(FALSE)
            ->addValue('geo_code_2', $data_longitude)
            ->addWhere('contact_id', '=', $cid)
            ->addWhere('is_primary', '=', TRUE)
            ->execute();
        }

        //update materiel location
        if ($materiel_location ) {
           $results = \Civi\Api4\Contact::update()
            ->addValue('Materiel.nom_location', $materiel_location)
            ->addWhere('id', '=', $cid)
            ->execute(); 

            //update materiel location_new

            $custom_service->updateLocationNew ($cid, $materiel_location);
        }else {// si aucun materiel location n'est selectionné
            $custom_service->updateLocationNewSetNull ($cid, $materiel_location);
        }

        $custom_service->updateMail($data_email, $cid);
        $custom_service->updatePhone($data_phone, $cid);
        $custom_service->updateWebsite($data_website, $cid);


        if ($data_marques) {
          //supprimer les anciennes marques
          $delete_marque = \Civi\Api4\CustomValue::delete('Marques', FALSE)
          ->addWhere('entity_id', '=', $cid)
          ->execute();

          
          //ajout nouveau marque lié avec l'entreprise
          foreach ($data_marques as $data_marque) {
            $add_new_marque = \Civi\Api4\CustomValue::create('Marques', FALSE)
              ->addValue('nom_Marque', $data_marque)
              ->addValue('entity_id', $cid)
              ->execute();
          }
        } 
          
         if ($url_video_presentation) {
          //ajout video dans media -> video en ligne  https://www.youtube.com/watch?v=73YG0olNXWo
          $query = "select field_media_oembed_video_value from media__field_media_oembed_video  where field_media_oembed_video_value = '" . $url_video_presentation . " '" ;
          $existing_video = $db->query($query)->fetch();
          if (!$existing_video) {
            $added_video = $custom_service->createMediaTypeVideo($url_video_presentation);
            $mid = $added_video->get('mid')->getValue()[0]['value'];
            if ($mid) {
              $custom_service->assignVideoToEntreprise($cid, $mid, $db);
            }
          }else {
            //assigner la video à l'entreprise
            $added_video = $custom_service->createMediaTypeVideo($url_video_presentation);
            $mid = $added_video->get('mid')->getValue()[0]['value'];
            $custom_service->assignVideoToEntreprise($cid, $mid, $db);
            $custom_service->updatedb($cid, $mid);

          }
        }else {//delete url video linked with cid
          $custom_service->deleteVideoLinkedWithCid($cid);
        } 
          
    }

  }

 
}


/**
 * Implements hook_preprocess_page().
 */
function civicrm_webform_phenix_preprocess_page(&$variables)
{
  $request = \Drupal::request();
  $variables['#attached']['library'][] = 'civicrm_webform_phenix/civicrm_webform_phenix';
  
  $domain = \Drupal::request()->getHost();
  $currentUrl = \Drupal::request()->getRequestUri();
  if ((strpos($currentUrl, '/annuaire') !== false) && ($domain == 'extranet.dlr.fr')) {
    // Redirect to a specific URL.
    $response = new \Symfony\Component\HttpFoundation\RedirectResponse('https://annuairedlr.fr/annuaire/');
    $response->send();
  }
}

use Drupal\Core\Access\AccessResult;

/**
 * Implements hook_entity_update().
 */
function civicrm_webform_phenix_entity_update(Drupal\Core\Entity\EntityInterface $entity) {
  // Check if the updated entity is a webform.
  if ($entity instanceof Drupal\civicrm_entity\Entity\CivicrmEntity) {
     return AccessResult::allowed();
    /* 
    $entityType = $entity->getEntityTypeId();
    $entityId = $entity->id();
    
    
    $contactId = 20646;

  // Check permissions using the CiviCRM API.
  $civicrm = \Drupal::service('civicrm')->initialize();
  $permissions = $civicrm->call('EntityPermission', 'getpermissions', [
    'contact_id' => $contactId,
  ]);

  dump($permissions);die;

    // Get the webform's access control handler.
    $accessControlHandler = \Drupal::entityTypeManager()->getAccessControlHandler('civicrm_entity');
    
    // Get the current webform permissions.
    $permissions = $accessControlHandler->buildPermissions($entity);

    // Add or remove permissions as needed.
    // For example, to allow anonymous users to view and submit the webform:
    $permissions['view any webform'] = TRUE;
    $permissions['submit webform'] = TRUE;

    // Save the updated permissions.
    $accessControlHandler->savePermissions($entity, $permissions); */
  }
}


/**
 * 
 * Gestion de permission par rapport à l'utilisateur anonyme
 * 
 * Implements hook_entity_access().
 */
function civicrm_webform_phenix_entity_access($entity, $operation, $account) {
  // return Drupal\Core\Access\AccessResult::neutral();
  $custom_service = \Drupal::service('civicrm_webform_phenix.webform');
   
   $white_list_entity = $custom_service->whiteList();
  if ($account->isAnonymous()) {
    if (in_array($entity->id(), $white_list_entity))  {
      if ($operation == 'submission_page') {//n'authoriser aux utilisateurs anonyme que les 
        return Drupal\Core\Access\AccessResult::allowed();
      }
    }else {
       return Drupal\Core\Access\AccessResult::forbidden();
    }
  } 

}


